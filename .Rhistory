a <-available.packages()
head(rownames(a),3)
a
install.package("slidify")
install.packages("slidify")
install.packages("ggplot2")
install.packages("devtools")
install.packages("slidify")
library(ggplot2)
search()
install.packages("KernSmooth")
library(KernSmooth)
clear
clc
fileURL <- "http://www.espn.com/nba/team/_/name/cle/cleveland-cavaliers"
doc <- htmlTreeParse(fileURL,useInternal = TRUE)
library(xml)
library(XML)
?htmlTreeparse
install.packages('XML')
library(XML)
doc <- htmlTreeParse(fileURL,useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
scores
install.packages("swril")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/ 2^20)
mutate(cran3, size_mb = size/ 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size/ 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size -1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
?download.file()
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
getwd()
ls()
download.file(fileURL,destfile = "./Idaho.csv", method = "curl")
ls
ls()
list.files()
idaho <- read.csv("Idaho.csv")
head(idaho)
head(idaho)
idaho$VAL
idaho$VAL == 24
isTRUE(idaho$VAL == 24)
mil <- idaho$VAL == 24
idaho$VAL[mil]
corrected.cases
?complete.cases()
complete.cases(idaho$VAL)
sum(idaho$VAL == 24)
sum(idaho$VAL == 24, na.rm = TRUE)
idaho$FES
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xls)
install.packages("xls")
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library("xlsx")
install.packages("rJava")
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
library("xlsx")
sudo R CMD javareconf
install.packages("rJava",type='source')
install.packages("rJava", type = "source")
install.packages("xlsx")
library("xlsx")
install.packages("rJava")
install.packages("xlsx")
library("xlsx")
library("xlsx")
install.packages("rJava")
library(rJava)
install.packages("xlsx")
library(xlsx)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL,"idahouse.csv", method = "curl")
idahouse <- read.csv(idahouse.csv)
idahouse <- read.csv("idahouse.csv")
head(idahouse)
install.packages("dplyr")
transform(idahouse, x = (idahouse$ACR > 2 & idahouse$AGS > 5))
agricultureLogical <- idahouse$x
agricultureLogical
idahouse2<-transform(idahouse, x = (idahouse$ACR > 2 & idahouse$AGS > 5))
agricultureLogical<-idahouse2$x
agricultureLogical
which(agricultureLogical)
install.packages("jpeg")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileURL,"photo.jpg")
jpeg("photo.jpg")
readJPEG()
library(jpeg)
readJPEG("photo.jpg", native = TRUE)
readJPEG("photo.jpg", native = TRUE)
photo<-readJPEG("photo.jpg", native = TRUE)
quantile(photo,c(.30, .80))
fileURL1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
fileURL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileURL1,"education.csv", method = "curl")
download.file(fileURL2,"GDP.csv", method = "curl")
education <- read.csv("education.csv")
GDP <- read.csv("GDP.csv")
head(education)
head(GDP)
GDP
str(GDP)
head(GDP)
head(GDP,n=20)
head(education,n=20)
str(education)
GDP$X
education$CountryCode
complete.cases(education$CountryCode)
unique(education$CountryCode)
size(unique(education$CountryCode))
length(unique(education$CountryCode))
length(unique(GDP$X))
unique(GDP$X) %in% unique(education$CountryCode)
sum(unique(GDP$X) %in% unique(education$CountryCode))
unique(GDP$X)
unique(education$CountryCode)
unique(GDP$X)[1]
unique(GDP$X)[[1]]
unique(GDP$X)
class(unique(GDP$X))
match(GDP$X,education$CountryCode)
match(GDP$X,education$CountryCode, nomatch = 0)
match(unique(GDP$X),unique(education$CountryCode))
match(unique(GDP$X),unique(education$CountryCode),nomatch = 0)
max(match(unique(GDP$X),unique(education$CountryCode),nomatch = 0))
install.packages("dplyr")
library(dplyr)
str(GDP)
head(GDP)
GDP$Gross.domestic.product.2012
arrange(GDP, desc(GDP$Gross.domestic.product.2012))
GDP2<-arrange(GDP, desc(GDP$Gross.domestic.product.2012))
head(GDP2)
head(GDP2,n=10)
GDP2<-arrange(GDP, desc(GDP$X.3))
head(GDP2)
head(GDP2, n=10)
str(GDP)
names(GDP)
names(GDP)[2]
names(GDP)[2] <- "GDP.2012"
names(GDP)[2]
head(GDP2, n=10)
head(GDP, n=10)
tail(GDP)
library(dplyr)
arrang(GDP,desc(GDP$GDP.2012))
arrange(GDP,desc(GDP$GDP.2012))
select(GDP, GDP$GDP.2012, GDP$X.2)
GDP$GDP.2012
as.numeric(GDP$GDP.2012)
as.integer(GDP$GDP.2012)
sort(GDP$GDP.2012)
library()
install.packages("tidyr")
library(tidyr)
install.packages("plyr")
library(plyr)
rm(GDP2)
GDP
install.packages(c("boot", "cluster", "curl", "devtools", "foreign", "jsonlite", "lattice", "MASS", "Matrix", "R6", "Rcpp", "readr", "rpart", "survival"))
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
?intersect
ls
ls()
getwd()
list)
list()
GDP <- read.csv("GDP.csv", header = TRUE, sep = ',')
head(GDP)
GDP
GDP
tail(GDP)
head(GDP)
head(GDP, n= 3:20)
GDP[3:20,]
tail(GDP,n=20)
tail(GDP,n=50)
tail(GDP,n=100)
GDP[3:236,]
GDP[4:236,]
GDP[5:236,]
GDP2<-GDP[5:236,]
head(GDP2)
str(GDP2)
arrange(GDP2, GDP2$X.3)
class(GDP2)
str(GDP@)
str(GDP2)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
GDP2$X.3 <- as.numeric.factor(GDP2$X.3)
str(GDP2)
GDP2$X.3
levels(GDP2$X.3)
GDP2<-GDP[5:236,]
levels(GDP2$X.3)
tail(GDP2)
str(GDP2)
levels(GDP2$X.3)
as.numeric.factor(GDP2$X.3)
?factor
as.numeric(as.character(GDP2$X.3))
as.character(GDP2$X.3)
GDP2$X.3
levels(GDP2$X.3)
as.numeric(levels(GDP2$X.3))
GDP2$X.3[1]
GDP2$X.3[2]
GDP2
tail(GDP2,n=100)
rm(GDP,GDP2)
read.csv("GDP.csv")
gdp<-read.csv("GDP.csv")
summary(gdp)
str(gdp)
head(gdp)
gdp <- gdp[5:190,1:4]
head(gdp)
gdp %>% select(-X.1)
gdp<-read.csv("GDP.csv")
gdp <- gdp[5:196,1:4]
gdp %>% select(-X.1)
gdp<-read.csv("GDP.csv")
gdp <- gdp[5:194,1:5]
head(gdp)
gdp %>% select(-X.1)
str(gdp)
names(gdp)
"gdp.2012" <- names(gdp)[2]
names(gdp)
names(gdp)[2]
names(gdp)[2] <- "gdp.2012"
names(gdp)[2]
names(gdp)[2]
names(gdp)
head(gdp)
gdp[2]
gdp[3]
gdp %>% select(-X.1)
gdp
gdp<-gdp %>% select(-X.1)
head(gdp)
names(gdp)[2] <- "GDP Rank"
head(gdp)
gdp[1][1]
gdp[1]
gdp[[1]]
class(gdp[[1]])
test <- as.character(gdp[[1]])
test
test <- as.character(gdp[[4]])
test
test[1]
as.numeric(test)
?as.numeric
x<-123,45326
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
head(test)
str_replace(test," ", "")
str_replace_all(test," ", "")
str_replace_all(test,",", "")
test<-str_replace_all(test," ", "")
test<-str_replace_all(test,",", "")
test
as.numeric(test)
head(gdp)
gdp$X.3<-as.numeric(test)
head(gdp)
arrange(gdp,desc(X.3))
arrange(gdp, -X.3)
arrange(gdp, gdp$X)
arrange(gdp, -gdp$X.3)
arrange(gdp, desc(gdp$X.3))
arrr
desc(gdp$X.3)
gdp$X.3
gdp %>% arrange(X.3) %>% head
gdp %>% arrange(X.3) %>% head(n=20)
unique(gdp$X)
unique(as.character(gdp$X))
length(unique(as.character(gdp$X)))
ctry <- unique(as.character(gdp$X))
ctry
ctry <- order(ctry)
ctry
ctry <- unique(as.character(gdp$X))
ctry <- sort(ctry)
ctry
school <- read.csv("education.csv")
head(school)
names(school)
school[1]
str(school)
ctry2 <- unique(as.character(school$CountryCode))
ctry2
ctry2 <- sort(ctry2)
ctry2
match(ctry,ctry2)
lenght
length(ctry2)
length(ctry)
match(ctry2,ctry)
head(school)
school[2]
head(school[3])
class(school$Income.Group)
sort(school$Income.Group)
arrange(school,sort(school$Income.Group))
arrange(school,school$Income.Group)
select(school, school$CountryCode, school$Income.Group)
arrange(school, school$CountryCode, school$Income.Group)
select(school, school$CountryCode)
select(school, school[2])
school[2]
school[,c(1,3)]
sub<-school[,c(1,3)]
head(sub)
sub[2]
sub[2]<-sort(sub[2])
sub[2]<-sort(sub[2],na.last = TRUE)
sub[2]<-sort(sub[,2],na.last = TRUE)
head(sub)
sub
sub<-school[,c(1,3)]
head(sub)
head(gdp)
head(gdp[order(X)])
head(gdp[order(gdp$X)])
gdp$X
class(gdp$X)
head(gdp[sort(gdp$X)])
head(gdp[,sort(gdp$X)])
order(gdp$X)
sort(gdp$X)
names(gdp)
gdp[order(X),]
gdp[order(gdp$X),]
gdp <- gdp[order(gdp$X),]
head(gdp)
head(sub)
match(sub$CountryCode,gdp$X)
gdpIND <- match(sub$CountryCode,gdp$X)
mutate(sub, GDP[gdpIND] = gdp$X.3)
mutate(sub, GDP = gdp$X.3)
gdpIND
for (i in 1:length(gdpIND)){}
for (i in 1:length(gdpIND))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url,f)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215))
head(dtGDP)
dtGDP <- dtGDP[X != ""]
head(dtGDP)
str(dtGDP)
dtGDP <- dtGDP[, list(X, X.1, X.2, X.3, X.4)]
head(dtGDP)
setnames(dtGDP, c("X", "X.1", "X.2", "X.3", "X.4"), c("Country Code", "rankingGDP", "Long.Name", "gdp"))
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("Country Code", "rankingGDP", "Long.Name", "gdp"))
head(dtGDP)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
names(dtEd)
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
setnames(dtGD,  c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
names(dtGDP)
setnames(dtGDP, "Country Code", "CountryCode")
names(dtGDP)
dt <- merge(dtGDP, dtEd, all = TRUE, by = "CountryCode")
head(dt)
str(dtE)
str(dt)
sum(!is.na(unique(dt$rankingGDP)))
unique(dt$rankingGDP)
!is.na(unique(dt$rankingGDP))
names(dt)
order(rankingGDP, decreasing = TRUE)
order(dt, rankingGDP, decreasing = TRUE)
?order
order(dt$rankingGDP)
order(dt$rankingGDP, decreasing = TRUE)
dt[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y,
rankingGDP, gdp)][13]
dt[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
dt[, list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
dt[order(rankingGDP, decreasing = TRUE),][13]
order(rankingGDP, decreasing = TRUE)
dt[order(rankingGDP, decreasing = TRUE),]
str(dt)
dt[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
breaks <- quantile()
breaks <- quantile(dt$rankingGDP, probs = seq(0,1,0.2), na.rm = TRUE)
breaks
seq(0,1,0.2)
dt$rankingGDP <- cut(dt$rankingGDP, breaks = breaks)
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
dt$quantileGDP <- cut(dt$rankingGDP, breaks = breaks)
dt[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
names(dt)
dt$quantileGDP
source('~/Desktop/Mavens_Assessment_SearchData/mavens.R')
source('~/Desktop/Mavens_Assessment_SearchData/mavens.R')
source('~/Desktop/Mavens_Assessment_SearchData/mavens.R')
sum(cleaning$Avg.Monthly.Searches)
135000/sum(cleaning$Avg.Monthly.Searches)
135000/sum(cleaning$Avg.Monthly.Searches)*100
